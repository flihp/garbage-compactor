From 0ef5c4bb9171413a3679dc2b23517e70f40ca475 Mon Sep 17 00:00:00 2001
From: "Joshua M. Clulow" <josh@sysmgr.org>
Date: Fri, 19 Nov 2021 13:31:03 -0800
Subject: [PATCH] XXX illumos support

---
 CMakeLists.txt                 |   2 +
 cmake/illumos.cmake            |  10 ++
 src/nvim/CMakeLists.txt        |  11 +-
 src/nvim/os/pty_process_unix.c |   2 +
 src/nvim/os_illumos.c          | 185 +++++++++++++++++++++++++++++++++
 src/nvim/os_illumos.h          |  12 +++
 src/nvim/po/CMakeLists.txt     |   4 +
 third-party/CMakeLists.txt     |   2 +
 8 files changed, 224 insertions(+), 4 deletions(-)
 create mode 100644 cmake/illumos.cmake
 create mode 100644 src/nvim/os_illumos.c
 create mode 100644 src/nvim/os_illumos.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index daf9c966f..b2bfdb546 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -79,6 +79,8 @@ endif()
 # used for check_c_compiler_flag
 include(CheckCCompilerFlag)
 
+include(illumos)
+
 if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
   # CMake tries to treat /sw and /opt/local as extension of the system path, but
   # that doesn't really work out very well.  Once you have a dependency that
diff --git a/cmake/illumos.cmake b/cmake/illumos.cmake
new file mode 100644
index 000000000..bfc8db40c
--- /dev/null
+++ b/cmake/illumos.cmake
@@ -0,0 +1,10 @@
+if (CMAKE_SYSTEM_NAME STREQUAL "SunOS")
+  # Determine if the host is running an illumos distribution:
+  execute_process(COMMAND /usr/bin/uname -o OUTPUT_VARIABLE UNAME_O
+    OUTPUT_STRIP_TRAILING_WHITESPACE)
+
+  if (UNAME_O STREQUAL "illumos")
+    set(ILLUMOS 1)
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DNVIM_OS_ILLUMOS=1")
+  endif()
+endif()
diff --git a/src/nvim/CMakeLists.txt b/src/nvim/CMakeLists.txt
index 185d55dae..8de8e29c7 100644
--- a/src/nvim/CMakeLists.txt
+++ b/src/nvim/CMakeLists.txt
@@ -144,6 +144,9 @@ foreach(sfile ${NVIM_SOURCES})
   if(NOT WIN32 AND ${f} MATCHES "^(os_win_console.c)$")
     list(APPEND to_remove ${sfile})
   endif()
+  if(NOT ILLUMOS AND ${f} MATCHES "^(os_illumos.c)$")
+    list(APPEND to_remove ${sfile})
+  endif()
 endforeach()
 
 list(REMOVE_ITEM NVIM_SOURCES ${to_remove})
@@ -467,10 +470,10 @@ list(APPEND NVIM_LINK_LIBRARIES
 )
 
 if(UNIX)
-  list(APPEND NVIM_LINK_LIBRARIES
-    m
-    util
-  )
+  list(APPEND NVIM_LINK_LIBRARIES m)
+  if (NOT ILLUMOS)
+    list(APPEND NVIM_LINK_LIBRARIES util)
+  endif()
 endif()
 
 set(NVIM_EXEC_LINK_LIBRARIES ${NVIM_LINK_LIBRARIES} ${LUA_PREFERRED_LIBRARIES})
diff --git a/src/nvim/os/pty_process_unix.c b/src/nvim/os/pty_process_unix.c
index 24ecf5c24..b103400e9 100644
--- a/src/nvim/os/pty_process_unix.c
+++ b/src/nvim/os/pty_process_unix.c
@@ -15,6 +15,8 @@
 # include <libutil.h>
 #elif defined(__OpenBSD__) || defined(__NetBSD__) || defined(__APPLE__)
 # include <util.h>
+#elif defined(NVIM_OS_ILLUMOS)
+# include "nvim/os_illumos.h"
 #else
 # include <pty.h>
 #endif
diff --git a/src/nvim/os_illumos.c b/src/nvim/os_illumos.c
new file mode 100644
index 000000000..cec787f77
--- /dev/null
+++ b/src/nvim/os_illumos.c
@@ -0,0 +1,185 @@
+#include <sys/types.h>
+#include <stdlib.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <stropts.h>
+#include <strings.h>
+#include <errno.h>
+
+#include "nvim/os_illumos.h"
+
+static int
+openpty_failure(int c, int s, int e)
+{
+	if (s >= 0) {
+		(void) close(s);
+	}
+
+	if (c >= 0) {
+		(void) close(c);
+	}
+
+	errno = e;
+	return (-1);
+}
+
+int
+openpty(int *controlp, int *subordp, char *name, const struct termios *termp,
+    const struct winsize *winp)
+{
+	int c = -1;
+	int s = -1;
+	char *sname;
+	int found;
+
+	/*
+	 * Open a pseudo-terminal control device, making sure not to set it as
+	 * the controlling terminal for this process:
+	 */
+	if ((c = posix_openpt(O_RDWR | O_NOCTTY)) < 0) {
+		return (-1);
+	}
+
+	/*
+	 * Set permissions and ownership on the subordinate device and unlock
+	 * it:
+	 */
+	if (grantpt(c) < 0 || unlockpt(c) < 0) {
+		return (openpty_failure(c, s, errno));
+	}
+
+	/*
+	 * Open the subordinate device for this control device, again without
+	 * setting it as the controlling terminal for this process:
+	 */
+	if ((sname = ptsname(c)) == NULL ||
+	    (s = open(sname, O_RDWR | O_NOCTTY)) < 0) {
+		return (openpty_failure(c, s, errno));
+	}
+
+	/*
+	 * Check to see if the STREAMS modules have been automatically pushed:
+	 */
+	if ((found = ioctl(s, I_FIND, "ldterm")) < 0) {
+		return (openpty_failure(c, s, errno));
+	} else if (found == 0) {
+		/*
+		 * The line discipline is not present, so push the appropriate
+		 * STREAMS modules for the subordinate device:
+		 */
+		if (ioctl(s, I_PUSH, "ptem") < 0 ||
+		    ioctl(s, I_PUSH, "ldterm") < 0) {
+			return (openpty_failure(c, s, errno));
+		}
+	}
+
+	/*
+	 * If provided, set the terminal parameters:
+	 */
+	if (termp != NULL && tcsetattr(s, TCSAFLUSH, termp) != 0) {
+		return (openpty_failure(c, s, errno));
+	}
+
+	/*
+	 * If provided, set the window size:
+	 */
+	if (winp != NULL && ioctl(s, TIOCSWINSZ, winp) != 0) {
+		return (openpty_failure(c, s, errno));
+	}
+
+	/*
+	 * If the caller wants the name of the subordinate device, copy it out.
+	 *
+	 * Note that this is a terrible interface: there appears to be no
+	 * standard upper bound on the copy length for this pointer.  Nobody
+	 * should pass anything but NULL here, preferring instead to use
+	 * ptsname(3C) directly.
+	 */
+	if (name != NULL) {
+		strcpy(name, sname);
+	}
+	*controlp = c;
+	*subordp = s;
+	return (0);
+}
+
+int
+login_tty(int t)
+{
+	/*
+	 * Use TIOCSCTTY to set this terminal device as our controlling
+	 * terminal.  This will fail (with ENOTTY) if we are not the leader in
+	 * our own session, so we call setsid() first.  Finally, arrange for
+	 * the pseudo-terminal to occupy the standard I/O descriptors.
+	 */
+	if (setsid() < 0 ||
+	    ioctl(t, TIOCSCTTY, 0) < 0 ||
+	    dup2(t, STDIN_FILENO) < 0 ||
+	    dup2(t, STDOUT_FILENO) < 0 ||
+	    dup2(t, STDERR_FILENO) < 0) {
+		return (-1);
+	}
+
+	/*
+	 * Close the inherited descriptor, taking care to avoid closing the
+	 * standard descriptors by mistake:
+	 */
+	if (t > STDERR_FILENO) {
+		(void) close(t);
+	}
+
+	return (0);
+}
+
+int
+forkpty(int *controlp, char *name, const struct termios *termp,
+    const struct winsize *winp)
+{
+	int s;
+	int c;
+	int pid;
+	if (openpty(&c, &s, name, termp, winp) != 0) {
+		return (-1);
+	}
+	if ((pid = fork()) < 0) {
+		return (openpty_failure(c, s, errno));
+	} else if (pid > 0) {
+		/*
+		 * In the parent process, we close the subordinate device and
+		 * return the process ID of the new child:
+		 */
+		(void) close(s);
+		*controlp = c;
+		return (pid);
+	}
+
+	/*
+	 * The rest of this function executes in the child process.
+	 */
+
+	/*
+	 * Close the control side of the pseudo-terminal pair:
+	 */
+	(void) close(c);
+
+	if (login_tty(s) != 0) {
+		/*
+		 * At this stage there are no particularly good ways to handle
+		 * failure.  Exit as abruptly as possible, using _exit() to
+		 * avoid messing with any state still shared with the parent
+		 * process.
+		 */
+		_exit(EXIT_FAILURE);
+	}
+
+	return (0);
+}
+
+int
+cfsetspeed(struct termios *t, speed_t s)
+{
+	(void) cfsetispeed(t, s);
+	(void) cfsetospeed(t, s);
+
+	return (0);
+}
diff --git a/src/nvim/os_illumos.h b/src/nvim/os_illumos.h
new file mode 100644
index 000000000..6f81e44a3
--- /dev/null
+++ b/src/nvim/os_illumos.h
@@ -0,0 +1,12 @@
+#ifndef	NVIM_OS_ILLUMOS_H
+#define	NVIM_OS_ILLUMOS_H
+
+#include <sys/termios.h>
+
+int openpty(int *, int *, char *, const struct termios *,
+    const struct winsize *);
+int login_tty(int);
+int forkpty(int *, char *, const struct termios *, const struct winsize *);
+int cfsetspeed(struct termios *, speed_t);
+
+#endif
diff --git a/src/nvim/po/CMakeLists.txt b/src/nvim/po/CMakeLists.txt
index 28f572304..b243415eb 100644
--- a/src/nvim/po/CMakeLists.txt
+++ b/src/nvim/po/CMakeLists.txt
@@ -1,5 +1,9 @@
 find_package(Gettext REQUIRED)
+if(ILLUMOS)
+find_program(XGETTEXT_PRG gxgettext)
+else()
 find_program(XGETTEXT_PRG xgettext)
+endif()
 find_program(ICONV_PRG iconv)
 
 option(LANGUAGES "Localizations to build")
diff --git a/third-party/CMakeLists.txt b/third-party/CMakeLists.txt
index 52839d8ef..25f98c690 100644
--- a/third-party/CMakeLists.txt
+++ b/third-party/CMakeLists.txt
@@ -8,6 +8,8 @@ include(CheckCCompilerFlag)
 # Point CMake at any custom modules we may ship
 list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake" "${PROJECT_SOURCE_DIR}/../cmake")
 
+include(illumos)
+
 # In Windows/MSVC CMAKE_BUILD_TYPE changes the paths/linking of the build
 # recipes (libuv, msgpack), make sure it is set
 if(NOT CMAKE_BUILD_TYPE)
-- 
2.27.0

