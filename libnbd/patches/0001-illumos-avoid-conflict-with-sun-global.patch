From 3d631a9cff4491ddadf33f6e5c2572b34b809ccb Mon Sep 17 00:00:00 2001
From: "Joshua M. Clulow" <jmc@oxide.computer>
Date: Mon, 14 Feb 2022 13:08:24 -0800
Subject: [PATCH] illumos: avoid conflict with "sun" global

---
 lib/connect.c  | 10 +++++-----
 lib/uri.c      |  6 +++---
 python/utils.c | 10 +++++-----
 3 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/lib/connect.c b/lib/connect.c
index 5008063..2dc15f9 100644
--- a/lib/connect.c
+++ b/lib/connect.c
@@ -150,19 +150,19 @@ nbd_unlocked_aio_connect (struct nbd_handle *h,
 int
 nbd_unlocked_aio_connect_unix (struct nbd_handle *h, const char *unixsocket)
 {
-  struct sockaddr_un sun = { .sun_family = AF_UNIX };
+  struct sockaddr_un s_un = { .sun_family = AF_UNIX };
   socklen_t len;
   size_t namelen;
 
   namelen = strlen (unixsocket);
-  if (namelen > sizeof sun.sun_path) {
+  if (namelen > sizeof s_un.sun_path) {
     set_error (ENAMETOOLONG, "socket name too long: %s", unixsocket);
     return -1;
   }
-  memcpy (sun.sun_path, unixsocket, namelen);
-  len = sizeof sun;
+  memcpy (s_un.sun_path, unixsocket, namelen);
+  len = sizeof s_un;
 
-  memcpy (&h->connaddr, &sun, len);
+  memcpy (&h->connaddr, &s_un, len);
   h->connaddrlen = len;
 
   return nbd_internal_run (h, cmd_connect_sockaddr);
diff --git a/lib/uri.c b/lib/uri.c
index 5e8dc06..8bb79f0 100644
--- a/lib/uri.c
+++ b/lib/uri.c
@@ -470,9 +470,9 @@ nbd_unlocked_get_uri (struct nbd_handle *h)
     }
 
     case AF_UNIX: {
-      struct sockaddr_un *sun = (struct sockaddr_un *) &h->connaddr;
+      struct sockaddr_un *s_un = (struct sockaddr_un *) &h->connaddr;
 
-      if (sun->sun_path[0] == '\0') {
+      if (s_un->sun_path[0] == '\0') {
         /* Unix domain sockets in the abstract namespace are in theory
          * supported in NBD URIs, but libxml2 cannot handle them so
          * libnbd cannot use them here or in nbd_connect_uri.
@@ -483,7 +483,7 @@ nbd_unlocked_get_uri (struct nbd_handle *h)
       }
 
       uri.scheme = using_tls ? "nbds+unix" : "nbd+unix";
-      if (append_query_params (&query_params, "socket", sun->sun_path) == -1)
+      if (append_query_params (&query_params, "socket", s_un->sun_path) == -1)
         goto out;
       /* You have to set this otherwise xmlSaveUri generates bogus
        * URIs "nbd+unix:/?socket=..."
diff --git a/python/utils.c b/python/utils.c
index 37f0c55..ed0a871 100644
--- a/python/utils.c
+++ b/python/utils.c
@@ -111,22 +111,22 @@ nbd_internal_py_get_sockaddr (PyObject *addr,
   memset (ss, 0, sizeof *ss);
 
   if (PyUnicode_Check (addr)) { /* AF_UNIX */
-    struct sockaddr_un *sun = (struct sockaddr_un *)ss;
+    struct sockaddr_un *s_un = (struct sockaddr_un *)ss;
     const char *unixsocket;
     size_t namelen;
 
-    sun->sun_family = AF_UNIX;
+    s_un->sun_family = AF_UNIX;
     unixsocket = PyUnicode_AsUTF8 (addr);
     if (!unixsocket)
       goto err;
     namelen = strlen (unixsocket);
-    if (namelen > sizeof sun->sun_path) {
+    if (namelen > sizeof s_un->sun_path) {
       PyErr_SetString (PyExc_RuntimeError,
                        "get_sockaddr: Unix domain socket name too long");
       return -1;
     }
-    memcpy (sun->sun_path, unixsocket, namelen);
-    *len = sizeof *sun;
+    memcpy (s_un->sun_path, unixsocket, namelen);
+    *len = sizeof *s_un;
     return 0;
   }
 
-- 
2.31.1

